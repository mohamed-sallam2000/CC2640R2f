/** \mainpage Driver Overview
  *
  * \section section_drv_info Driver Information
  * This Sensor Controller Interface driver has been generated by the Texas Instruments Sensor Controller
  * Studio tool:
  * - <b>Project name</b>:     max30102withCC26402rf
  * - <b>Project file</b>:     C:/Users/mohamed_sallam/OneDrive - Nile University/nile_work/software/sensor controller codes/max30102_with sensor controller.scp
  * - <b>Code prefix</b>:      -
  * - <b>Operating system</b>: TI-RTOS
  * - <b>Tool version</b>:     2.9.0.208
  * - <b>Tool patches</b>:     1, 2, 3 and 4
  * - <b>Target chip</b>:      CC2640R2F, package QFN48 7x7 RGZ, revision -
  * - <b>Created</b>:          2025-01-30 14:44:27.275
  * - <b>Computer</b>:         HP-ZBOOK-15
  * - <b>User</b>:             mohamed_sallam
  *
  * No user-provided resource definitions were used to generate this driver.
  *
  * No user-provided procedure definitions were used to generate this driver.
  *
  * Do not edit the generated source code files other than temporarily for debug purposes. Any
  * modifications will be overwritten by the Sensor Controller Studio when generating new output.
  *
  * \section section_drv_modules Driver Modules
  * The driver is divided into three modules:
  * - \ref module_scif_generic_interface, providing the API for:
  *     - Initializing and uninitializing the driver
  *     - Task control (for starting, stopping and executing Sensor Controller tasks)
  *     - Task data exchange (for producing input data to and consume output data from Sensor Controller
  *       tasks)
  * - \ref module_scif_driver_setup, containing:
  *     - The AUX RAM image (Sensor Controller code and data)
  *     - I/O mapping information
  *     - Task data structure information
  *     - Driver setup data, to be used in the driver initialization
  *     - Project-specific functionality
  * - \ref module_scif_osal, for flexible OS support:
  *     - Interfaces with the selected operating system
  *
  * It is possible to use output from multiple Sensor Controller Studio projects in one application. Only
  * one driver setup may be active at a time, but it is possible to switch between these setups. When
  * using this option, there is one instance of the \ref module_scif_generic_interface and
  * \ref module_scif_osal modules, and multiple instances of the \ref module_scif_driver_setup module.
  * This requires that:
  * - The outputs must be generated using the same version of Sensor Controller Studio
  * - The outputs must use the same operating system
  * - The outputs must use different source code prefixes (inserted into all globals of the
  *   \ref module_scif_driver_setup)
  *
  *
  * \section section_project_info Project Description
  * No description entered
  *
  *
  * \subsection section_io_mapping I/O Mapping
  * Task I/O functions are mapped to the following pins:
  * - New task:
  *     - <b>I2C SCL</b>: DIO4
  *     - <b>I2C SDA</b>: DIO5
  *
  *
  * \section section_task_info Task Description(s)
  * This driver supports the following task(s):
  *
  *
  * \subsection section_task_desc_new_task New task
  * No description entered
  *
  */




/** \addtogroup module_scif_driver_setup Driver Setup
  *
  * \section section_driver_setup_overview Overview
  *
  * This driver setup instance has been generated for:
  * - <b>Project name</b>:     max30102withCC26402rf
  * - <b>Code prefix</b>:      -
  *
  * The driver setup module contains the generated output from the Sensor Controller Studio project:
  * - Location of task control and scheduling data structures in AUX RAM
  * - The AUX RAM image, and the size the image
  * - Task data structure information (location, size and buffer count)
  * - I/O pin mapping translation table
  * - Task resource initialization and uninitialization functions
  * - Hooks for run-time logging
  *
  * @{
  */
#ifndef SCIF_H
#define SCIF_H

#include <stdint.h>
#include <stdbool.h>
#include "scif_framework.h"
#include "scif_osal_tirtos.h"


/// Target chip name
#define SCIF_TARGET_CHIP_NAME_CC2640R2F
/// Target chip package
#define SCIF_TARGET_CHIP_PACKAGE_QFN48_7X7_RGZ

/// Number of tasks implemented by this driver
#define SCIF_TASK_COUNT 1

/// New task: Task ID
#define SCIF_NEW_TASK_TASK_ID 0


/// New task: 0x57 in hex is the address of max30102 but sensor controller need to be lefted shift by one so 57*2=0xAE
#define SCIF_NEW_TASK_MAX30102_ADDR 174
/// New task: 
#define SCIF_NEW_TASK_REG_FIFO_CONFIG 8
/// New task: 
#define SCIF_NEW_TASK_REG_FIFO_DATA 7
/// New task: 
#define SCIF_NEW_TASK_REG_FIFO_RD_PTR 6
/// New task: 
#define SCIF_NEW_TASK_REG_FIFO_WR_PTR 4
/// New task: 
#define SCIF_NEW_TASK_REG_INTR_ENABLE_1 2
/// New task: 
#define SCIF_NEW_TASK_REG_INTR_ENABLE_2 3
/// New task: 
#define SCIF_NEW_TASK_REG_INTR_STATUS_1 0
/// New task: 
#define SCIF_NEW_TASK_REG_INTR_STATUS_2 1
/// New task: 
#define SCIF_NEW_TASK_REG_LED1_PA 12
/// New task: 
#define SCIF_NEW_TASK_REG_LED2_PA 13
/// New task: 
#define SCIF_NEW_TASK_REG_MODE_CONFIG 9
/// New task: 
#define SCIF_NEW_TASK_REG_OVF_COUNTER 5
/// New task: 
#define SCIF_NEW_TASK_REG_PILOT_PA 16
/// New task: 
#define SCIF_NEW_TASK_REG_SPO2_CONFIG 10
/// New task: 
#define SCIF_NEW_TASK_REG_TEMP_CONFIG 33
/// New task: 
#define SCIF_NEW_TASK_REG_TEMP_FRAC 32
/// New task: 
#define SCIF_NEW_TASK_REG_TEMP_INTR 31
/// New task: 0 is red first byte ,1 red sencond  two byte,2 ir first  byte,3 it second two bytes,4temp integer  ,5 temp fraction 
#define SCIF_NEW_TASK_BUFFER_SIZE_SHARE_READINGS_CPU_SC 35
/// New task I/O mapping: I2C SCL
#define SCIF_NEW_TASK_DIO_I2C_SCL 4
/// New task I/O mapping: I2C SDA
#define SCIF_NEW_TASK_DIO_I2C_SDA 5


// All shared data structures in AUX RAM need to be packed
#pragma pack(push, 2)


/// New task: Task output data structure
typedef struct {
    uint16_t outputDataBuffer[35];   ///< redLed and  ir led reading  each one is 32 bit  totoal size is 64 
    uint16_t outputsecondbuffer[35]; ///< 
} SCIF_NEW_TASK_OUTPUT_T;


/// New task: Task state structure
typedef struct {
    uint16_t i2cStatus; ///< I2C master status
} SCIF_NEW_TASK_STATE_T;


/// Sensor Controller task data (configuration, input buffer(s), output buffer(s) and internal state)
typedef struct {
    struct {
        SCIF_NEW_TASK_OUTPUT_T output;
        SCIF_NEW_TASK_STATE_T state;
    } newTask;
} SCIF_TASK_DATA_T;

/// Sensor Controller task generic control (located in AUX RAM)
#define scifTaskData    (*((volatile SCIF_TASK_DATA_T*) 0x400E00EA))


// Initialized internal driver data, to be used in the call to \ref scifInit()
extern const SCIF_DATA_T scifDriverSetup;


// Restore previous struct packing setting
#pragma pack(pop)


// AUX I/O re-initialization functions
void scifReinitTaskIo(uint32_t bvTaskIds);


// RTC-based tick generation control
void scifStartRtcTicks(uint32_t tickStart, uint32_t tickPeriod);
void scifStartRtcTicksNow(uint32_t tickPeriod);
void scifStopRtcTicks(void);


#endif
//@}


// Generated by HP-ZBOOK-15 at 2025-01-30 14:44:27.275
